{"ast":null,"code":"var _jsxFileName = \"/Users/anoojlal/Documents/repos/HFCYTHW/src/components/Solo.js\";\nimport React from \"react\";\nimport \"./../css/Solo.css\";\nimport \"./../css/Console.css\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { github } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport AppNavbar from \"./AppNavbar.js\";\nimport PressEnter from \"@material-ui/icons/KeyboardReturn\";\nimport Backspace from \"@material-ui/icons/BackspaceOutlined\";\nimport { Row, Col } from \"reactstrap\";\nimport ConsoleLogs from \"./ConsoleLogs\";\nimport Input from \"./Input\";\nexport default class Solo extends React.Component {\n  constructor(props) {\n    super(props);\n    const codeBlock = 'public class HelloWorld {\\n\\tpublic static void main(String[] args) {\\n\\t\\tSystem.out.println(\"Hello World!\");\\n\\t}\\n}';\n    this.state = {\n      codeBlock: codeBlock,\n      length: codeBlock.length,\n      completed: \"\",\n      current: codeBlock.charAt(0),\n      incorrect: \"\",\n      remaining: codeBlock.substring(1),\n      finished: false,\n      pressEnter: false,\n      backspace: false,\n      logs: [],\n      playing: false,\n      time: \"0:00.0\",\n      cps: 0,\n      accuracy: 0.0,\n      seconds: 0,\n      incorrectTyped: 0,\n      progress: \"[--------------------]\",\n      numInputs: 0\n    };\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCorrectInput = this.handleCorrectInput.bind(this);\n    this.handleIncorrectInput = this.handleIncorrectInput.bind(this);\n    this.handleBackspace = this.handleBackspace.bind(this);\n    this.getLineNumbers = this.getLineNumbers.bind(this);\n    this.getCurrentLineNumber = this.getCurrentLineNumber.bind(this);\n    this.clearLog = this.clearLog.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.msToTime = this.msToTime.bind(this);\n    this.getProgress = this.getProgress.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keypress\", this.handleKeyPress, false);\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keypress\", this.handleKeyPress, false);\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  handleKeyPress(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const key = event.keyCode;\n    const inputChar = String.fromCharCode(key);\n    const valid = key >= 32 && key <= 126 || key === 13;\n\n    if (inputChar === \" \") {\n      event.preventDefault();\n    }\n\n    if (valid) {\n      const {\n        current,\n        pressEnter,\n        incorrect,\n        playing\n      } = this.state;\n\n      if (!playing) {\n        this.setState({\n          playing: true\n        });\n        this.startTimer();\n      }\n\n      if (incorrect.length === 0 && (inputChar === current || pressEnter && key === 13)) {\n        this.handleCorrectInput();\n      } else {\n        this.handleIncorrectInput(key);\n      }\n    }\n  }\n\n  handleKeyDown(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const key = event.keyCode;\n\n    if (key === 8) {\n      this.handleBackspace();\n    } else if (key === 9 || key === 11) {\n      event.preventDefault();\n    }\n  }\n\n  handleCorrectInput() {\n    let {\n      codeBlock,\n      completed,\n      current,\n      remaining,\n      finished,\n      logs,\n      seconds,\n      cps,\n      progress,\n      numInputs\n    } = this.state;\n    completed = completed + current;\n    current = remaining.charAt(0);\n    remaining = remaining.substring(1);\n    finished = codeBlock === completed;\n    cps = (completed.length / (seconds === 0 ? 1 : seconds)).toFixed(2);\n\n    if (finished) {\n      document.removeEventListener(\"keypress\", this.handleKeyPress, false);\n      document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n      logs.push({\n        type: \"info\",\n        text: \"Finished. Hit Refresh to play again.\"\n      });\n      clearInterval(this.timer);\n    }\n\n    this.setState({\n      completed: completed,\n      current: current,\n      remaining: remaining,\n      pressEnter: current === \"\\n\",\n      backspace: false,\n      finished: finished,\n      logs: logs,\n      cps: cps,\n      numInputs: numInputs + 1,\n      accuracy: (completed.length / (numInputs + 1) * 100).toFixed(2)\n    });\n    progress = this.getProgress(completed.length, remaining.length);\n    this.setState({\n      progress: progress\n    });\n\n    if (current === \"\\t\") {\n      this.handleCorrectInput();\n    }\n  }\n\n  handleIncorrectInput(key) {\n    let {\n      incorrect,\n      current,\n      logs,\n      pressEnter,\n      numInputs,\n      completed\n    } = this.state;\n    const inputChar = String.fromCharCode(key);\n    let log = null;\n\n    if (incorrect.length < 5) {\n      incorrect = incorrect + (key === 13 ? \" \" : inputChar);\n\n      if (incorrect.length === 1) {\n        log = {\n          type: \"warning\",\n          text: \"Found '\" + (key === 13 ? \"[Enter]\" : inputChar) + \"'; expected '\" + (pressEnter ? \"[Enter]\" : current) + \"'\",\n          line: this.getCurrentLineNumber()\n        };\n      } else if (incorrect.length === 5) {\n        log = {\n          type: \"error\",\n          text: \"Backspace your mistakes before progressing\",\n          line: this.getCurrentLineNumber()\n        };\n      }\n    }\n\n    this.setState({\n      incorrect: incorrect,\n      backspace: true,\n      numInputs: numInputs + 1,\n      accuracy: (completed.length / (numInputs + 1) * 100).toFixed(2)\n    });\n\n    if (log) {\n      if (logs.length >= 3) {\n        while (logs.length >= 3) {\n          logs.splice(0, 1);\n        }\n\n        this.setState({\n          logs\n        });\n        logs.push(log);\n        this.setState({\n          logs\n        });\n      } else {\n        logs.push(log);\n        this.setState({\n          logs\n        });\n      }\n\n      this.clearLog(log);\n    }\n  }\n\n  clearLog(log) {\n    setTimeout(() => {\n      const {\n        logs\n      } = this.state;\n\n      if (logs[logs.length - 1] === log) {\n        logs.splice(0, 1);\n        this.setState({\n          logs: logs\n        });\n\n        if (logs.length > 0) {\n          this.clearLog(logs[logs.length - 1]);\n        }\n      }\n    }, 5000);\n  }\n\n  handleBackspace() {\n    let {\n      completed,\n      incorrect,\n      current,\n      remaining,\n      progress\n    } = this.state;\n\n    if (incorrect.length > 0) {\n      incorrect = incorrect.substring(0, incorrect.length - 1);\n    } else if (completed.length === 0) {\n      return;\n    } else {\n      remaining = current + remaining;\n      current = completed.charAt(completed.length - 1);\n      completed = completed.substring(0, completed.length - 1);\n      progress = this.getProgress(completed.length, remaining.length);\n    }\n\n    this.setState({\n      completed: completed,\n      incorrect: incorrect,\n      remaining: remaining,\n      pressEnter: current === \"\\n\",\n      backspace: incorrect.length > 0,\n      current: current,\n      progress: progress\n    });\n\n    if (current === \"\\t\") {\n      this.handleBackspace();\n    }\n  }\n\n  getLineNumbers() {\n    const numLines = this.state.codeBlock.split(\"\\n\").length;\n    let lineNumbers = \"\";\n\n    for (let i = 1; i <= numLines; i++) {\n      lineNumbers = lineNumbers + \" \" + i + \"\\n\";\n    }\n\n    return lineNumbers;\n  }\n\n  getCurrentLineNumber() {\n    return this.state.completed.split(\"\\n\").length;\n  }\n\n  startTimer() {\n    const startTime = Date.now();\n    this.timer = setInterval(() => {\n      const timeElapsed = Date.now() - startTime;\n      this.setState({\n        time: this.msToTime(timeElapsed),\n        seconds: Math.floor(timeElapsed / 1000 % 60)\n      });\n    }, 1);\n  }\n\n  msToTime(ms) {\n    let milliseconds = parseInt(ms % 1000 / 100),\n        seconds = Math.floor(ms / 1000 % 60),\n        minutes = Math.floor(ms / (1000 * 60) % 60);\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return minutes + \":\" + seconds + \".\" + milliseconds;\n  }\n\n  getProgress(completed, remaining) {\n    if (completed === 0) {\n      return \"[--------------------]\";\n    }\n\n    if (this.state.finished) {\n      return \"[********************]\";\n    }\n\n    let progress = \"[\";\n    let completion = Math.floor(completed / (completed + remaining) * 20);\n\n    if (completion === 20) {\n      completion--;\n    }\n\n    for (let i = 0; i < completion; i++) {\n      progress = progress + \"*\";\n    }\n\n    progress = progress + \"o\";\n\n    for (let i = 0; i < 19 - completion; i++) {\n      progress = progress + \"-\";\n    }\n\n    progress = progress + \"]\";\n    return progress;\n  }\n\n  render() {\n    const {\n      codeBlock,\n      completed,\n      current,\n      incorrect,\n      remaining,\n      pressEnter,\n      backspace,\n      logs,\n      time,\n      cps,\n      accuracy,\n      progress\n    } = this.state;\n    const customStyle = {\n      whiteSpace: \"pre-wrap\",\n      marginBottom: \"0px\",\n      backgroundColor: \"white\",\n      tabSize: \"4\",\n      webkitTouchCallout: \"none\"\n      /* iOS Safari */\n      ,\n      webkitUserSelect: \"none\"\n      /* Safari */\n      ,\n      khtmlUserSelect: \"none\"\n      /* Konqueror HTML */\n      ,\n      mozUserSelect: \"none\"\n      /* Firefox */\n      ,\n      msUserSelect: \"none\"\n      /* Internet Explorer/Edge */\n      ,\n      userSelect: \"none\",\n      padding: \"0em\" // display: \"none\"\n\n    };\n    const lineNumbers = this.getLineNumbers();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AppNavbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"codeBlock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lineNumbers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }\n    }, lineNumbers)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 19\n      }\n    }, completed), !backspace && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"current\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }\n    }, pressEnter && /*#__PURE__*/React.createElement(PressEnter, {\n      className: \"pressEnter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 38\n      }\n    }), current), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"incorrect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 19\n      }\n    }, incorrect, backspace && /*#__PURE__*/React.createElement(Backspace, {\n      className: \"backspace\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 35\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 19\n      }\n    }, remaining)), /*#__PURE__*/React.createElement(SyntaxHighlighter, {\n      language: \"java\",\n      style: github,\n      customStyle: customStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }\n    }, codeBlock)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"console\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ConsoleLogs, {\n      logs: logs,\n      time: time,\n      cps: cps,\n      accuracy: accuracy,\n      progress: progress,\n      playing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"consoleBreak\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Input, {\n      playing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/anoojlal/Documents/repos/HFCYTHW/src/components/Solo.js"],"names":["React","SyntaxHighlighter","github","AppNavbar","PressEnter","Backspace","Row","Col","ConsoleLogs","Input","Solo","Component","constructor","props","codeBlock","state","length","completed","current","charAt","incorrect","remaining","substring","finished","pressEnter","backspace","logs","playing","time","cps","accuracy","seconds","incorrectTyped","progress","numInputs","handleKeyPress","bind","handleKeyDown","handleCorrectInput","handleIncorrectInput","handleBackspace","getLineNumbers","getCurrentLineNumber","clearLog","startTimer","msToTime","getProgress","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","event","defaultPrevented","key","keyCode","inputChar","String","fromCharCode","valid","preventDefault","setState","toFixed","push","type","text","clearInterval","timer","log","line","splice","setTimeout","numLines","split","lineNumbers","i","startTime","Date","now","setInterval","timeElapsed","Math","floor","ms","milliseconds","parseInt","minutes","completion","render","customStyle","whiteSpace","marginBottom","backgroundColor","tabSize","webkitTouchCallout","webkitUserSelect","khtmlUserSelect","mozUserSelect","msUserSelect","userSelect","padding"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./../css/Solo.css\";\r\nimport \"./../css/Console.css\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { github } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport AppNavbar from \"./AppNavbar.js\";\r\nimport PressEnter from \"@material-ui/icons/KeyboardReturn\";\r\nimport Backspace from \"@material-ui/icons/BackspaceOutlined\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport ConsoleLogs from \"./ConsoleLogs\";\r\nimport Input from \"./Input\";\r\n\r\nexport default class Solo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const codeBlock =\r\n      'public class HelloWorld {\\n\\tpublic static void main(String[] args) {\\n\\t\\tSystem.out.println(\"Hello World!\");\\n\\t}\\n}';\r\n\r\n    this.state = {\r\n      codeBlock: codeBlock,\r\n      length: codeBlock.length,\r\n      completed: \"\",\r\n      current: codeBlock.charAt(0),\r\n      incorrect: \"\",\r\n      remaining: codeBlock.substring(1),\r\n      finished: false,\r\n      pressEnter: false,\r\n      backspace: false,\r\n      logs: [],\r\n      playing: false,\r\n      time: \"0:00.0\",\r\n      cps: 0,\r\n      accuracy: 0.0,\r\n      seconds: 0,\r\n      incorrectTyped: 0,\r\n      progress: \"[--------------------]\",\r\n      numInputs: 0,\r\n    };\r\n\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.handleCorrectInput = this.handleCorrectInput.bind(this);\r\n    this.handleIncorrectInput = this.handleIncorrectInput.bind(this);\r\n    this.handleBackspace = this.handleBackspace.bind(this);\r\n    this.getLineNumbers = this.getLineNumbers.bind(this);\r\n    this.getCurrentLineNumber = this.getCurrentLineNumber.bind(this);\r\n    this.clearLog = this.clearLog.bind(this);\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.msToTime = this.msToTime.bind(this);\r\n    this.getProgress = this.getProgress.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keypress\", this.handleKeyPress, false);\r\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keypress\", this.handleKeyPress, false);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const key = event.keyCode;\r\n    const inputChar = String.fromCharCode(key);\r\n    const valid = (key >= 32 && key <= 126) || key === 13;\r\n\r\n    if (inputChar === \" \") {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (valid) {\r\n      const { current, pressEnter, incorrect, playing } =\r\n        this.state;\r\n\r\n      if (!playing) {\r\n        this.setState({\r\n          playing: true,\r\n        });\r\n\r\n        this.startTimer();\r\n      }\r\n\r\n      if (\r\n        incorrect.length === 0 &&\r\n        (inputChar === current || (pressEnter && key === 13))\r\n      ) {\r\n        this.handleCorrectInput();\r\n      } else {\r\n        this.handleIncorrectInput(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const key = event.keyCode;\r\n\r\n    if (key === 8) {\r\n      this.handleBackspace();\r\n    } else if (key === 9 || key === 11) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  handleCorrectInput() {\r\n    let {\r\n      codeBlock,\r\n      completed,\r\n      current,\r\n      remaining,\r\n      finished,\r\n      logs,\r\n      seconds,\r\n      cps,\r\n      progress,\r\n      numInputs,\r\n    } = this.state;\r\n\r\n    completed = completed + current;\r\n    current = remaining.charAt(0);\r\n    remaining = remaining.substring(1);\r\n    finished = codeBlock === completed;\r\n    cps = (completed.length / (seconds === 0 ? 1 : seconds)).toFixed(2);\r\n\r\n    if (finished) {\r\n      document.removeEventListener(\"keypress\", this.handleKeyPress, false);\r\n      document.removeEventListener(\"keydown\", this.handleKeyDown, false);\r\n\r\n      logs.push({\r\n        type: \"info\",\r\n        text: \"Finished. Hit Refresh to play again.\",\r\n      });\r\n\r\n      clearInterval(this.timer);\r\n    }\r\n\r\n    this.setState({\r\n      completed: completed,\r\n      current: current,\r\n      remaining: remaining,\r\n      pressEnter: current === \"\\n\",\r\n      backspace: false,\r\n      finished: finished,\r\n      logs: logs,\r\n      cps: cps,\r\n      numInputs: numInputs + 1,\r\n      accuracy: ((completed.length / (numInputs + 1)) * 100).toFixed(2),\r\n    });\r\n\r\n    progress = this.getProgress(completed.length, remaining.length);\r\n\r\n    this.setState({ progress: progress });\r\n\r\n    if (current === \"\\t\") {\r\n      this.handleCorrectInput();\r\n    }\r\n  }\r\n\r\n  handleIncorrectInput(key) {\r\n    let { incorrect, current, logs, pressEnter, numInputs, completed } =\r\n      this.state;\r\n\r\n    const inputChar = String.fromCharCode(key);\r\n    let log = null;\r\n\r\n    if (incorrect.length < 5) {\r\n      incorrect = incorrect + (key === 13 ? \" \" : inputChar);\r\n\r\n      if (incorrect.length === 1) {\r\n        log = {\r\n          type: \"warning\",\r\n          text:\r\n            \"Found '\" +\r\n            (key === 13 ? \"[Enter]\" : inputChar) +\r\n            \"'; expected '\" +\r\n            (pressEnter ? \"[Enter]\" : current) +\r\n            \"'\",\r\n          line: this.getCurrentLineNumber(),\r\n        };\r\n      } else if (incorrect.length === 5) {\r\n        log = {\r\n          type: \"error\",\r\n          text: \"Backspace your mistakes before progressing\",\r\n          line: this.getCurrentLineNumber(),\r\n        };\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      incorrect: incorrect,\r\n      backspace: true,\r\n      numInputs: numInputs + 1,\r\n      accuracy: ((completed.length / (numInputs + 1)) * 100).toFixed(2),\r\n    });\r\n\r\n    if (log) {\r\n      if (logs.length >= 3) {\r\n        while (logs.length >= 3) {\r\n          logs.splice(0, 1);\r\n        }\r\n\r\n        this.setState({ logs });\r\n        logs.push(log);\r\n        this.setState({ logs });\r\n      } else {\r\n        logs.push(log);\r\n        this.setState({ logs });\r\n      }\r\n\r\n      this.clearLog(log);\r\n    }\r\n  }\r\n\r\n  clearLog(log) {\r\n    setTimeout(() => {\r\n      const { logs } = this.state;\r\n\r\n      if (logs[logs.length - 1] === log) {\r\n        logs.splice(0, 1);\r\n        this.setState({ logs: logs });\r\n\r\n        if (logs.length > 0) {\r\n          this.clearLog(logs[logs.length - 1]);\r\n        }\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  handleBackspace() {\r\n    let { completed, incorrect, current, remaining, progress } = this.state;\r\n\r\n    if (incorrect.length > 0) {\r\n      incorrect = incorrect.substring(0, incorrect.length - 1);\r\n    } else if (completed.length === 0) {\r\n      return;\r\n    } else {\r\n      remaining = current + remaining;\r\n      current = completed.charAt(completed.length - 1);\r\n      completed = completed.substring(0, completed.length - 1);\r\n      progress = this.getProgress(completed.length, remaining.length);\r\n    }\r\n\r\n    this.setState({\r\n      completed: completed,\r\n      incorrect: incorrect,\r\n      remaining: remaining,\r\n      pressEnter: current === \"\\n\",\r\n      backspace: incorrect.length > 0,\r\n      current: current,\r\n      progress: progress,\r\n    });\r\n\r\n    if (current === \"\\t\") {\r\n      this.handleBackspace();\r\n    }\r\n  }\r\n\r\n  getLineNumbers() {\r\n    const numLines = this.state.codeBlock.split(\"\\n\").length;\r\n    let lineNumbers = \"\";\r\n\r\n    for (let i = 1; i <= numLines; i++) {\r\n      lineNumbers = lineNumbers + \" \" + i + \"\\n\";\r\n    }\r\n\r\n    return lineNumbers;\r\n  }\r\n\r\n  getCurrentLineNumber() {\r\n    return this.state.completed.split(\"\\n\").length;\r\n  }\r\n\r\n  startTimer() {\r\n    const startTime = Date.now();\r\n\r\n    this.timer = setInterval(() => {\r\n      const timeElapsed = Date.now() - startTime;\r\n\r\n      this.setState({\r\n        time: this.msToTime(timeElapsed),\r\n        seconds: Math.floor((timeElapsed / 1000) % 60),\r\n      });\r\n    }, 1);\r\n  }\r\n\r\n  msToTime(ms) {\r\n    let milliseconds = parseInt((ms % 1000) / 100),\r\n      seconds = Math.floor((ms / 1000) % 60),\r\n      minutes = Math.floor((ms / (1000 * 60)) % 60);\r\n\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return minutes + \":\" + seconds + \".\" + milliseconds;\r\n  }\r\n\r\n  getProgress(completed, remaining) {\r\n    if (completed === 0) {\r\n      return \"[--------------------]\";\r\n    }\r\n\r\n    if (this.state.finished) {\r\n      return \"[********************]\";\r\n    }\r\n\r\n    let progress = \"[\";\r\n    let completion = Math.floor((completed / (completed + remaining)) * 20);\r\n\r\n    if (completion === 20) {\r\n      completion--;\r\n    }\r\n\r\n    for (let i = 0; i < completion; i++) {\r\n      progress = progress + \"*\";\r\n    }\r\n\r\n    progress = progress + \"o\";\r\n\r\n    for (let i = 0; i < 19 - completion; i++) {\r\n      progress = progress + \"-\";\r\n    }\r\n\r\n    progress = progress + \"]\";\r\n\r\n    return progress;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      codeBlock,\r\n      completed,\r\n      current,\r\n      incorrect,\r\n      remaining,\r\n      pressEnter,\r\n      backspace,\r\n      logs,\r\n      time,\r\n      cps,\r\n      accuracy,\r\n      progress,\r\n    } = this.state;\r\n\r\n    const customStyle = {\r\n      whiteSpace: \"pre-wrap\",\r\n      marginBottom: \"0px\",\r\n      backgroundColor: \"white\",\r\n      tabSize: \"4\",\r\n      webkitTouchCallout: \"none\" /* iOS Safari */,\r\n      webkitUserSelect: \"none\" /* Safari */,\r\n      khtmlUserSelect: \"none\" /* Konqueror HTML */,\r\n      mozUserSelect: \"none\" /* Firefox */,\r\n      msUserSelect: \"none\" /* Internet Explorer/Edge */,\r\n      userSelect: \"none\",\r\n      padding: \"0em\",\r\n      // display: \"none\"\r\n    };\r\n\r\n    const lineNumbers = this.getLineNumbers();\r\n\r\n    return (\r\n      <div>\r\n        <AppNavbar />\r\n        <div className=\"solo\">\r\n          <div className=\"codeBlock\">\r\n            <Row>\r\n              <Col xs=\"1\">\r\n                <div className=\"lineNumbers\">{lineNumbers}</div>\r\n              </Col>\r\n              <Col xs=\"11\">\r\n                <div className=\"overlay\">\r\n                  <span>{completed}</span>\r\n                  {!backspace && (\r\n                    <span className=\"current\">\r\n                      {pressEnter && <PressEnter className=\"pressEnter\" />}\r\n                      {current}\r\n                    </span>\r\n                  )}\r\n                  <span className=\"incorrect\">\r\n                    {incorrect}\r\n                    {backspace && <Backspace className=\"backspace\" />}\r\n                  </span>\r\n                  <span>{remaining}</span>\r\n                </div>\r\n                <SyntaxHighlighter\r\n                  language=\"java\"\r\n                  style={github}\r\n                  customStyle={customStyle}\r\n                >\r\n                  {codeBlock}\r\n                </SyntaxHighlighter>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"console\">\r\n            <div className=\"sticky\">\r\n              <ConsoleLogs\r\n                logs={logs}\r\n                time={time}\r\n                cps={cps}\r\n                accuracy={accuracy}\r\n                progress={progress}\r\n                playing\r\n              />\r\n              <div className=\"consoleBreak\">\r\n                <br />\r\n              </div>\r\n              <Input playing />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}